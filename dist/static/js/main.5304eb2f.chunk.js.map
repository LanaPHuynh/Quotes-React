{"version":3,"sources":["components/layout/SignedIn.js","store/actions/AuthActions.js","components/layout/SignedOut.js","components/layout/Navbar.js","components/quotes/QuoteSummary.js","components/quotes/QuoteList.js","components/dashboard/Dashboard.js","components/quotes/QuoteDetail.js","components/authentication/SignIn.js","components/authentication/Register.js","store/actions/QuoteActions.js","components/quotes/AddQuote.js","App.js","serviceWorker.js","store/reducers/AuthReducer.js","store/reducers/QuoteReducer.js","store/reducers/RootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOut","state","console","log","firebase","links","uid","QuoteSummary","quote","userFirstName","userLastName","moment","createdAt","toDate","toString","calendar","QuoteList","quotes","map","id","key","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","ownProps","match","params","data","author","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","Register","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","response","doc","user","set","addQuote","userID","add","Date","AddQuote","history","push","App","exact","path","component","QuoteDetails","Boolean","window","location","hostname","initState","AuthReducer","action","message","QuoteReducer","RootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5304eb2f.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signOut } from '../../store/actions/AuthActions'\n\nconst SignedIn = (props) => {\n    \n    return (\n        <ul className=\"right\">\n            <li><NavLink to='/create'>New Quote</NavLink></li>\n            <li><a onClick={props.signOut}>Log Out</a></li>\n            <li><NavLink to='/' className='btn btn-floating pink lighten-1'>{props.profile.initials}</NavLink></li>\n        </ul>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n}\n\nexport default connect(null,mapDispatchToProps)(SignedIn)","export const signIn = (credentials) => {\n    return ( dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({type: 'LOGIN_SUCCESS'})\n        }).catch((err) => {\n            dispatch({type: 'LOGIN_ERROR', err});\n        });\n    }\n}\n\nexport const signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS'});\n        });\n    }\n}\n\nexport const signUp = (newUser) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then((response) => {\n            return firestore.collection('users').doc(response.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0] + newUser.lastName[0]\n            })\n        }).then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS'})\n        }).catch( err => {\n            dispatch({ type: 'SIGNUP_ERROR', err})\n        })\n    }\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom'\n\nconst SignedOut = () => {\n    return (\n        <ul className=\"right\">\n            <li><NavLink to='/register'>Register</NavLink></li>\n            <li><NavLink to='/signin'>Log In</NavLink></li>\n        </ul>\n    )\n}\n\nexport default SignedOut","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport SignedIn from './SignedIn'\nimport SignedOut from './SignedOut'\nimport { connect } from 'react-redux'\n\nconst Navbar = (props) => {\n    const { auth,profile } = props\n    //console.log(auth)\n    const links = auth.uid ? <SignedIn profile={profile}/> : <SignedOut />\n    return (\n        <nav className=\"nav-wrapper grey darken-3\">\n            <div className=\"container\">\n                <Link to='/' className=\"brand-logo\">Quotes</Link>\n                {links}\n            </div>\n        </nav>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    console.log(state)\n    return {\n        auth: state.firebase.auth,\n        profile: state.firebase.profile\n    }\n}\n\nexport default connect(mapStateToProps)(Navbar)\n","import React from 'react';\nimport moment from 'moment'\n\nconst QuoteSummary = ({quote}) => {\n    return (\n        <div className=\"card z-depth-0 quote-summary\">\n            <span className=\"card-title\">\"{quote.quote}\"</span>\n            <p>Posted by {quote.userFirstName} {quote.userLastName}</p>\n            <p className=\"grey-text\">{ moment(quote.createdAt.toDate().toString()).calendar() }</p>\n        </div>\n    )\n}\n\nexport default QuoteSummary;","import React from 'react';\nimport QuoteSummary from './QuoteSummary'\nimport { Link } from 'react-router-dom'\n\nconst QuoteList = ({quotes}) => {\n    return (\n        <div className=\"quote-list section\">\n            { quotes && quotes.map ( quote => {\n                return(\n                    <Link to={'/quote/' + quote.id}>\n                        <QuoteSummary quote={quote} key={quote.id} />\n                    </Link>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default QuoteList; ","import React, { Component } from 'react';\nimport QuoteList from '../quotes/QuoteList'\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\n\nclass Dashboard extends Component{\n    render() {\n        // console.log(this.props)\n        const { quotes, auth } = this.props;\n        if(!auth.uid) return <Redirect to='/signin' />\n        return (\n             <div className=\"dashboard container\">\n                 <div className=\"row\">\n                     <div className=\"col s12 m6\">\n                        <QuoteList quotes={quotes}/>\n                    </div>\n                 </div>\n             </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => { \n    return {\n        quotes: state.firestore.ordered.quotes,\n        auth: state.firebase.auth\n    }\n}\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection : 'quotes', orderBy:['createdAt', 'desc'] }\n    ])\n)(Dashboard);","import React from 'react'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment'\n\n\nconst QuoteDetail = (props) => {\n    const { quote,auth } = props;\n    if(!auth.uid) return <Redirect to='/signin' />\n    if( quote ) {\n        return (\n            <div className=\"container section project-details\">\n                <div className=\"card z-depth-0\">\n                    <div className=\"card-content\">\n                        <span className=\"card-title\">\"{ quote.quote }\"</span>\n                        <p> - { quote.author }</p>\n                    </div>\n                    <div className=\"card-action grey lighten-4 grey-text\">\n                        <div> Posted by { quote.userFirstName } { quote.userLastName } </div>\n                        <div> { moment(quote.createdAt.toDate().toString()).calendar() } </div>\n                    </div>\n                </div>\n            </div>\n        )\n    } else{\n        return (\n            <div className=\"container center\">\n                <p>Loading Quotes...</p>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    const id= ownProps.match.params.id;\n    const quotes = state.firestore.data.quotes;\n    const quote = quotes ? quotes[id] : null;\n    return {\n        quote: quote,\n        auth: state.firebase.auth\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'quotes' }\n    ])\n)(QuoteDetail);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {signIn} from '../../store/actions/AuthActions'\nimport { Redirect } from 'react-router-dom'\n\nclass SignIn extends Component {\n    state = {\n        email: \"\",\n        password: \"\"\n    }\n\n    handleChange =(e) => {\n        this.setState({\n            [e.target.id]: e.target.value \n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.signIn(this.state)\n    }\n\n    render() {\n        const { authError, auth } = this.props;\n        if(auth.uid) return <Redirect to='/' />\n\n        return (\n            <div className=\"container\">                \n                <form onSubmit= {this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Log In</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn blue lighten-1 z-depth-0\">Log In</button>\n                    </div>\n                    <div className=\"red-text center\">\n                        { authError ? <p>{authError}</p> : null}\n                    </div>\n                </form>\n            </div>        \n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        authError: state.auth.authError,\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signIn: (creds) => dispatch(signIn(creds))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signUp } from '../../store/actions/AuthActions'\n\nclass Register extends Component {\n    state = {\n        email: '',\n        password: '',\n        firstName: '',\n        lastName: ''\n    }\n\n    handleChange =(e) => {\n        this.setState({\n            [e.target.id]: e.target.value \n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.signUp(this.state)\n    }\n\n    render() {\n        const { auth, authError } = this.props;\n        if(auth.uid) return <Redirect to='/' />\n        return (\n            <div className=\"container\">                \n                <form onSubmit= {this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Register</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"firstName\">First Name</label>\n                        <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"lastName\">Last Name</label>\n                        <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn blue lighten-1 z-depth-0\">Register</button>\n                    </div>\n                    <div className=\"red-text center\">\n                        {authError ? <p>{authError}</p> : null}\n                    </div>\n                </form>\n            </div>        \n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth,\n        authError: state.auth.authError\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        signUp: (newUser) => dispatch(signUp(newUser))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)\n","const addQuote = (quote) => {\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        //make async call to db\n        const firestore = getFirestore();\n        const profile = getState().firebase.profile;\n        const userID = getState().firebase.auth.uid;\n        firestore.collection('quotes').add({\n            quote: quote.quote,\n            author: quote.author,\n            userFirstName: profile.firstName,\n            userLastName: profile.lastName,\n            userID: userID,\n            createdAt: new Date()\n        }).then(()=> {\n            dispatch({ type: 'ADD_QUOTE', quote})\n        }).catch((err) => {\n        dispatch({ type: 'ADD_QUOTE_ERROR', err})\n        })\n    }\n}\n\nexport default addQuote","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport addQuote from '../../store/actions/QuoteActions';\nimport { Redirect } from 'react-router-dom'\n\nclass AddQuote extends Component {\n    state = {\n        quote: \"\",\n        author: \"\"\n    }\n\n    handleChange =(e) => {\n        this.setState({\n            [e.target.id]: e.target.value \n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addQuote(this.state)\n        this.props.history.push('/')\n    }\n\n    render() {\n        const {auth} = this.props\n        if(!auth.uid) return <Redirect to='/signin' />\n        return (\n            <div className=\"container\">                \n                <form onSubmit= {this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Add a Quote</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"quote\">Quote</label>\n                        <input type=\"text\" id=\"quote\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"author\">Author</label>\n                        <input type=\"text\" id=\"author\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn blue lighten-1 z-depth-0\">Add Quote</button>\n                    </div>\n                </form>\n            </div>        \n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addQuote: (quote) => dispatch(addQuote(quote))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuote)","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport QuoteDetails from './components/quotes/QuoteDetail'\nimport SignIn from './components/authentication/SignIn'\nimport Register from './components/authentication/Register';\nimport AddQuote from './components/quotes/AddQuote'\n\n\nclass App extends Component{\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          {/* switch tag makes sure only one route is loaded at a time */}\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/quote/:id' component={QuoteDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/register' component={Register} />\n            <Route path='/create' component={AddQuote} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    authError: null\n};\n\nconst AuthReducer = (state = initState, action) => {\n    switch(action.type){\n        case 'LOGIN_ERROR':\n            console.log('login error')\n            return {\n                ...state,\n                authError: 'Login Failed'\n            }\n        case 'LOGIN_SUCCESS':\n            console.log('Login Success');\n            return{\n                ...state,\n                authError: null\n            }\n        case 'SIGNOUT_SUCCESS':\n            console.log('Signout Success');\n            return state;\n        case 'SIGNUP_SUCCESS':\n            console.log('Signup Success')\n            return{\n                ...state,\n                authError: null\n            }\n        case 'SIGNUP_ERROR':\n            console.log('Signup Error')\n            return {\n                ...state,\n                authError: action.err.message\n            }\n        default:\n            return state;\n    }\n}\nexport default AuthReducer;","const initState = {\n    quotes:[\n        {id: '1', quote: 'The greatest glory in living lies not in never falling, but in rising every time we fall.', author:'Nelson Mandela'},\n        {id: '2', quote: 'The way to get started is to quit talking and begin doing.', author:'Walt Disney'},\n        {id: '3', quote: 'Spread love everywhere you go. Let no one ever come to you without leaving happier.', author:'Mother Teresa'}\n    ]\n};\n\nconst QuoteReducer = (state = initState, action) => {\n    switch( action.type ) {\n        case 'ADD_QUOTE':\n            console.log('added quote:', action.quote);\n            return state;\n        case 'ADD_QUOTE_ERROR':\n            console.log('add quote error', action.err);\n            return state;\n        default:\n            return state\n    }\n}\nexport default QuoteReducer","import AuthReducer from './AuthReducer';\nimport QuoteReducer from './QuoteReducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore'\nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst RootReducer = combineReducers({\n    auth: AuthReducer,\n    quote: QuoteReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n});\n\nexport default RootReducer;\n","import firebase from 'firebase/app' // app = just the base feature of the fb library \nimport 'firebase/firestore' //the db\nimport 'firebase/auth'\n\n\n\n  // Your web app's Firebase configuration\n  var firebaseConfig = {\n    apiKey: \"AIzaSyBwZa1rKorOfrmzH098ijDA1LgpSHhWrUI\",\n    authDomain: \"quotes-react-86904.firebaseapp.com\",\n    databaseURL: \"https://quotes-react-86904.firebaseio.com\",\n    projectId: \"quotes-react-86904\",\n    storageBucket: \"\",\n    messagingSenderId: \"409376852084\",\n    appId: \"1:409376852084:web:f67a247c10361810e8e921\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.firestore();\n  // .settings({ timestampsInSnapshots: true }) //initialize the fire store and add on settings with object (timeStamp) \n\n  export default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware,compose } from 'redux';\nimport RootReducer from './store/reducers/RootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport fbConfig from './config/fbConfig'\n\n\nconst store = createStore(RootReducer, \n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reduxFirestore(fbConfig),\n        reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, userProfile:'users', attachAuthIsReady: true})\n    )\n);\n\nstore.firebaseAuthIsReady.then(() => {\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n    serviceWorker.unregister();\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}